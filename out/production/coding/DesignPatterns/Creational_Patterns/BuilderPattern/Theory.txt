- Builder is a creational design pattern that lets you construct complex objects step by step. The pattern allows you to produce different types and representations of an object using the same construction code.
- The Builder pattern suggests that you extract the object construction code out of its own class and move it to separate objects called builders.

- The main purpose of the builder pattern is to avoid having complex constructors. In general, you should avoid having a constructor that takes a large number of parameters.
Long lists of parameters are confusing and do not give you much flexibility when creating a class. Consider the case of a class representing a person. Each new person created will have a unique combination of characteristics.
For example, each person will have a name, age, hairColor, eyeColor, occupation, nationality, etc. Every time a person was created, all of this information would have to be passed into the constructor. This is a very long list that needs to be supplied, and it is easy to see how items might be put in the wrong order. There might also be times in the application where not all of the information is needed. You might need to create a person but only want to specify their name. To create a person you would still have to supply all the other information about their hair color, nationality, current city, etc. One way to fix this problem is to have multiple constructors.
